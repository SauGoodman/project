import json
import logging
import boto3
import awswrangler as wr
import requests
from botocore.exceptions import ClientError

# ログ設定を初期化
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    try:
        # ステップ1: S3から差分ファイルを読み込む
        bucket_name = "mastergpoc"
        file_key = "temp/01_product_compare.csv"
        logger.info("S3からファイルを読み込み中...")
        data = wr.s3.read_csv(f's3://{bucket_name}/{file_key}')
        Id_List = data['Project_Id'].tolist()
        logger.info(f"S3データ読み込み完了。データ数: {len(Id_List)}")

        # ステップ2: API URLとトークンを設定
        api_url = "https://api.plapi-product.com/plapi/api/v1/categories?limit=20&page=1"
        token = ("Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI3NSIsImp0aSI6IjA0OTM0MmQyZTViMDdmNDY4ZmQ3ZGExNmFhODEwZTZhMjMyYjk1MjMxN2ZlNGFkMzIxMWFhNTI1NzA3Y2UzYWI3ZWIyOGU3MTNmZDMxZGVlIiwiaWF0IjoxNzMzMzYyMTcxLjUwNDYzOCwibmJmIjoxNzMzMzYyMTcxLjUwNDY0MSwiZXhwIjoxNzUwNjQyMTcxLjQyNDAxNSwic3ViIjoiIiwic2NvcGVzIjpbIioiXX0."
                 "LMPyWDzLvv-SqZOg6anSsuaSLR1FgmoFd2Op4jS-dtT8J87zVqfaBgMyVBDftAXgKZnH_Xe4MzXVyhdKZ6JDcSuB5ENbFqIPzFxePeQFSlFxwV3rCBuq7vpX9BmLnV8bwMawGC_SX980z9wkk7m90v_x-EOYjkmLC9BYDS8wyfEQAGa67-ibHci_okmAKAMHE8Zc9BwFUkW-FjF3P26qUjlrkh4HC5uRh0BKTts61q8pc7VqbAithJK7KcAf2quiyuUBoq87XIGGnT9rxd2xd_oykO8Gh9iC-bNdxJLcIU9TInOXjjW9O-DjcJB8NfJo62xl72SdENnG_m4z9eGAamDCkFk1iM12vFiMeOhm1Id8nMD7ZgEf9E1z6oI6Qp705RnT-ZuP9DFy8bNiIciezU3AuHKrgTErSDVDaKHCEOfLN74LKiB9RWhTZc7Aje4xAWQOVdWR98y9I8-VfytWxPGRpHCAtgY4XBc6ghkreV0QgK-eVYc1q4jNJaLQLo0jUnpQ5SSVEHyQWDErForoMknaf-4bewQVPE-fIuZIt1HoOZ20UJ0sXBI1WgYO9qUzxZWz4y78zX7XToDOzdx8KHu9RVF2VxUZ9smwM3aYk7K6Fn24ilEDUSyXokbIMzcP5K9lb780o3ODlN6Ak2F-M43t15fEw205bWNvqXNeBXo")
        headers = {
            "User-Agent": "test-agent",
            "Authorization": token,
            "ClientId": "75"
        }

        # ステップ3: APIリクエストを実行
        logger.info("APIリクエストを送信中...")
        response = requests.get(api_url, headers=headers)

        if response.status_code == 200:
            logger.info("APIリクエスト成功。データを取得しました。")
            api_data = response.json()
            logger.info(f"取得したデータ: {api_data}")
        else:
            logger.error(f"APIリクエスト失敗: {response.status_code} - {response.text}")
            return {
                "statusCode": response.status_code,
                "body": "APIリクエスト失敗"
            }

        # ステップ4: 差分データをループ処理
        logger.info("データをループ処理中...")
        for index, row in data.iterrows():
            product_id = row.get('Project_Id')
            payload = json.dumps(row.to_dict())

            if not product_id:
                logger.info(f"新しいデータをPOST: {payload}")
                post_response = call_api("POST", api_url, payload, headers)
            else:
                logger.info(f"既存データをPUT: {payload}")
                put_response = call_api("PUT", f"{api_url}/{product_id}", payload, headers)

        return {
            "statusCode": 200,
            "body": json.dumps("処理が正常に完了しました")
        }

    except Exception as e:
        logger.error(f"エラーが発生しました: {str(e)}")
        return {
            "statusCode": 500,
            "body": f"エラー: {str(e)}"
        }

def call_api(method, url, payload, headers):
    """APIを呼び出すための関数"""
    try:
        if method == "POST":
            response = requests.post(url, data=payload, headers=headers)
        elif method == "PUT":
            response = requests.put(url, data=payload, headers=headers)
        else:
            raise ValueError("サポートされていないHTTPメソッド")
        return response
    except requests.exceptions.RequestException as e:
        logger.error(f"API呼び出しに失敗しました: {str(e)}")
        raise