import json
import logging
import awswrangler as wr
import requests
import pandas as pd
from botocore.exceptions import ClientError

# ログ設定を初期化
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def postPutProducts(input_file_key, output_file_key, bucket_name):
    try:
        # ステップ1: S3から入力ファイルを読み込み
        logger.info("S3から入力ファイルを読み込み中...")
        data = wr.s3.read_csv(f's3://{bucket_name}/{input_file_key}')
        logger.info(f"入力データ: {data.head()}")  # 確認のため先頭5行を表示

        # 結果リストを初期化
        result_data = []

        # トークンとヘッダーを設定
        token = "Bearer <your-api-token>"  # Replace with your actual token
        headers = {
            "User-Agent": "test-agent",
            "Authorization": token,
            "ClientId": "75"
        }

        # ステップ2: 各レコードを処理
        for index, row in data.iterrows():
            buturyu_cd = row['buturyu_cd']
            api_url = f"https://api.plapi-product.com/plapi/api/v1/com_product_id/catalogs/{buturyu_cd}"

            # 判断是 POST 还是 PUT
            if pd.isnull(row.get("product_id")):  # product_id が null の場合は POST
                method_type = "POST"
                response = requests.post(api_url, headers=headers, json=row.to_dict())
            else:  # product_id が存在する場合は PUT
                method_type = "PUT"
                response = requests.put(api_url, headers=headers, json=row.to_dict())

            # 处理 API 响应
            if response.status_code in [200, 201]:  # 成功
                result = response.json()
                logger.info(f"{method_type} 成功: {result}")
                product_id = result.get("product_id", "null")
                error_message = None
            else:  # 失败
                logger.error(f"{method_type} 失敗: {response.status_code} - {response.text}")
                product_id = "null"
                error_message = response.text

            # 更新行数据
            updated_row = row.to_dict()
            updated_row["method_type"] = method_type
            updated_row["product_id"] = product_id
            updated_row["error_message"] = error_message  # 添加错误信息
            result_data.append(updated_row)

        # ステップ3: 更新后的数据保存到 S3
        result_df = pd.DataFrame(result_data)
        wr.s3.to_csv(result_df, f's3://{bucket_name}/{output_file_key}', index=False)
        logger.info(f"結果がS3に保存されました: s3://{bucket_name}/{output_file_key}")

        return {
            "statusCode": 200,
            "body": json.dumps("postPutProducts 処理が正常に完了しました。")
        }

    except Exception as e:
        logger.error(f"エラーが発生しました: {str(e)}")
        return {
            "statusCode": 500,
            "body": f"エラー: {str(e)}"
        }