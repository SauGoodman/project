import json
import logging
import awswrangler as wr
import requests
import pandas as pd

# ログの設定
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    try:
        # S3バケットとファイルキーの指定
        bucket_name = "mastergpoc"
        file_key = "results/01_product_apipost.csv"  # CSVファイルのパス

        logger.info(f"S3からCSVファイルを読み込み中: s3://{bucket_name}/{file_key}")

        # S3からCSVファイルを読み込む
        try:
            df = wr.s3.read_csv(f"s3://{bucket_name}/{file_key}")
        except Exception as e:
            logger.error(f"CSVファイルの読み込みに失敗しました: {str(e)}")
            return {
                "statusCode": 500,
                "body": f"CSVファイルの読み込みに失敗しました: {str(e)}"
            }

        # APIエンドポイントのURL
        api_url = "https://api.plapi-product.com/plapi/api/v1/products"

        # ヘッダーの設定
        token = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI3NSIsImp0aSI6IjA0OTM0MmQyZTViMDdmNDY4ZmQ3ZGExNmFhODEwZTZhMjMyYjk1MjMxN2ZlNGFkMzIxMWFhNTI1NzA3Y2UzYWI3ZWIyOGU3MTNmZDMxZGVlIiwiaWF0IjoxNzMzMzYyMTcxLjUwNDYzOCwibmJmIjoxNzMzMzYyMTcxLjUwNDY0MSwiZXhwIjoxNzUwNjQyMTcxLjQyNDAxNSwic3ViIjoiIiwic2NvcGVzIjpbIioiXX0.LMPyWDzLvv-SqZOg6anSsuaSLR1FgmoFd2Op4jS-dtT8J87zVqfaBgMyVBDftAXgKZnH_Xe4MzXVyhdKZ6JDcSuB5ENbFqIPzFxePeQFSlFxwV3rCBuq7vpX9BmLnV8bwMawGC_SX980z9wkk7m90v_x-EOYjkmLC9BYDS8wyfEQAGa67-ibHci_okmAKAMHE8Zc9BwFUkW-FjF3P26qUjlrkh4HC5uRh0BKTts61q8pc7VqbAithJK7KcAf2quiyuUBoq87XIGGnT9rxd2xd_oykO8Gh9iC-bNdxJLcIU9TInOXjjW9O-DjcJB8NfJo62xl72SdENnG_m4z9eGAamDCkFk1iM12vFiMeOhm1Id8nMD7ZgEf9E1z6oI6Qp705RnT-ZuP9DFy8bNiIciezU3AuHKrgTErSDVDaKHCEOfLN74LKiB9RWhTZc7Aje4xAWQOVdWR98y9I8-VfytWxPGRpHCAtgY4XBc6ghkreV0QgK-eVYc1q4jNJaLQLo0jUnpQ5SSVEHyQWDErForoMknaf-4bewQVPE-fIuZIt1HoOZ20UJ0sXBI1WgYO9qUzxZWz4y78zX7XToDOzdx8KHu9RVF2VxUZ9smwM3aYk7K6Fn24ilEDUSyXokbIMzcP5K9lb780o3ODlN6Ak2F-M43t15fEw205bWNvqXNeBXo"  # トークンを設定
        headers = {
            "Content-Type": "application/json",
            "Authorization": token
        }

        # CSVからJSONデータを構築
        product_data = []
        for _, row in df.iterrows():
            product = {
                "category_id": "j3d7j0000021623",
                "com_product_id": row["buturyu_cd"],  # CSVのbuturyu_cdの値を使用
                "product_name": row["seihin_rkj"],  # CSVのseihin_rkjの値を使用
                "product_text": None,
                "product_status": "1",
                "edit_status": "1",
                "client_read_auth": "",
                "client_write_auth": "",
                "view_auth_group": "j3d7j_base",
                "edit_auth_group": "j3d7j_base",
                "basic": [
                    {
                        "id": "j3d7jE0000289845",
                        "key": "正式商品名",
                        "value": [row["seisiki_syohin_nm"]]  # CSVのseisiki_syohin_nmの値を使用
                    },
                    {
                        "id": "j3d7jE0000289846",
                        "key": "正式商品名英表記",
                        "value": [row["seisiki_syohin_ob"]]  # CSVのseisiki_syohin_obの値を使用
                    },
                    {
                        "id": "j3d7jE0000289847",
                        "key": "製品名漢字",
                        "value": [row["seihin_kj"]]  # CSVのseihin_kjの値を使用
                    },
                    {
                        "id": "j3d7jE0000289853",
                        "key": "希望小売価格",
                        "value": [row["kibou_kouri_pr"]]  # CSVのkibou_kouri_prの値を使用
                    }
                ]
            }
            product_data.append(product)

        # APIリクエスト用のデータを準備
        payload = {
            "products": product_data
        }

        # APIリクエストを送信
        logger.info(f"APIリクエストを送信中: {api_url}")
        response = requests.post(api_url, headers=headers, json=payload)

        # レスポンスの処理
        if response.status_code == 200:
            logger.info(f"APIリクエスト成功: {response.json()}")
            return {
                "statusCode": 200,
                "body": json.dumps("APIリクエスト成功")
            }
        else:
            logger.error(f"APIリクエスト失敗: {response.status_code} - {response.text}")
            return {
                "statusCode": response.status_code,
                "body": f"APIリクエスト失敗: {response.text}"
            }

    except Exception as e:
        logger.error(f"エラーが発生しました: {str(e)}")
        return {
            "statusCode": 500,
            "body": f"エラー: {str(e)}"
        }
