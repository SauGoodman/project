import json
import logging
import awswrangler as wr
import requests
import pandas as pd
from botocore.exceptions import ClientError

# ログ設定の初期化
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    try:
        # S3の設定
        bucket_name = "mastergpoc"
        input_file_key = "temp/01_product_compare.csv"  # 入力データ
        put_file_key = "results/01_product_apiput.csv"  # PUT結果出力
        post_file_key = "results/01_product_apipost.csv"  # POST結果出力

        # CSVデータを読み込む
        logger.info(f"S3からデータを読み込み: s3://{bucket_name}/{input_file_key}")
        try:
            data = wr.s3.read_csv(
                f's3://{bucket_name}/{input_file_key}', dtype=str, keep_default_na=False
            )
        except ClientError as e:
            logger.error(f"S3からのデータ読み込みに失敗: {str(e)}")
            return {"statusCode": 500, "body": f"エラー: {str(e)}"}

        # トークンとヘッダーの設定
        token = "Bearer <your-token-here>"  # トークンを適切に設定
        headers = {
            "User-Agent": "test-agent",
            "Authorization": token,
            "ClientId": "75",
        }

        batch_size = 100
        put_results = []
        post_results = []

        # バッチ処理でGETとPOSTを実行
        for i in range(0, len(data), batch_size):
            batch = data.iloc[i:i + batch_size]
            buturyu_ids = batch["buturyu_cd"].tolist()
            query_params = "&".join(buturyu_ids)

            # GETリクエスト
            get_api_url = f"https://api.plapi-product.com/plapi/api/v1/com_product_id/catalogs?{query_params}"
            try:
                response = requests.get(get_api_url, headers=headers, timeout=10)
                if response.status_code == 200:
                    templates = response.json().get("templates", [])
                    errors = response.json().get("errors", [])
                    # PUT対象データ
                    for template in templates:
                        put_results.append({
                            "product_id": template["product_id"],
                            "buturyu_cd": template["com_product_id"],
                            "category_name": template["category_name"],
                            "product_name": template["product_name"],
                            # 必要に応じて他の列を追加
                        })
                    # POST対象データ
                    for error in errors:
                        error_id = error.get("com_product_id")
                        error_row = batch[batch["buturyu_cd"] == error_id]
                        if not error_row.empty:
                            post_results.append(error_row.iloc[0].to_dict())
                else:
                    logger.error(f"GETリクエスト失敗: {response.status_code} - {response.text}")
            except Exception as e:
                logger.error(f"GETエラー: {str(e)}")

        # PUT結果の保存
        if put_results:
            put_df = pd.DataFrame(put_results)
            wr.s3.to_csv(put_df, f's3://{bucket_name}/{put_file_key}', index=False)
            logger.info(f"PUT結果を保存しました: s3://{bucket_name}/{put_file_key}")

        # POST結果の保存
        if post_results:
            post_df = pd.DataFrame(post_results)
            wr.s3.to_csv(post_df, f's3://{bucket_name}/{post_file_key}', index=False)
            logger.info(f"POST結果を保存しました: s3://{bucket_name}/{post_file_key}")

        return {"statusCode": 200, "body": "PUTとPOSTの処理が完了しました"}
    except Exception as e:
        logger.error(f"エラー: {str(e)}")
        return {"statusCode": 500, "body": f"エラー: {str(e)}"}