import json
import logging
import awswrangler as wr
import requests
import math

# ログ設定
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def sanitize_value(value, default="default_value"):
    """値をクリーニングし、欠損値をデフォルト値に置き換える"""
    if pd.isna(value):  # PandasのNaNチェック
        return default
    if isinstance(value, float) and (math.isnan(value) or math.isinf(value)):
        return default
    return value

def sanitize_float(value):
    """浮動小数点値をクリーニング"""
    if isinstance(value, float) and (math.isnan(value) or math.isinf(value)):
        return 0  # 無効値を0に置き換え
    return value

def lambda_handler(event, context):
    try:
        # ステップ1: S3からCSVファイルを読み込む
        bucket_name = "mastergpoc"
        input_file_key = "results/01_product_apipost.csv"  # 入力ファイルのS3パス
        logger.info(f"S3からCSVファイルを読み込み中: s3://{bucket_name}/{input_file_key}")

        # S3からCSVファイルを読み込む処理
        try:
            df = wr.s3.read_csv(f's3://{bucket_name}/{input_file_key}')
        except Exception as e:
            logger.error(f"CSVファイルの読み込みに失敗しました: {str(e)}")
            return {
                "statusCode": 500,
                "body": f"CSVファイルの読み込みに失敗しました: {str(e)}"
            }

        # ステップ2: データのクリーニングと欠損値の埋め合わせ
        # 各列の欠損値をデフォルト値で埋める
        df.fillna({
            "buturyu_cd": "default_id",          # 商品コードが空の場合のデフォルト値
            "seihin_rkj": "default_name",        # 製品名が空の場合のデフォルト値
            "seisiki_syohin_nm": "default_product",  # 正式商品名が空の場合のデフォルト値
            "seisiki_syohin_ob": "default_english",  # 正式商品名（英表記）が空の場合のデフォルト値
            "seihin_kj": "default_kanji",        # 製品名（漢字）が空の場合のデフォルト値
            "kibou_kouri_pr": 0                  # 希望小売価格が空の場合は0
        }, inplace=True)

        # ステップ3: POST用のJSONデータを構築
        product_data = []
        for _, row in df.iterrows():
            product = {
                "category_id": "j3d7j0000021623",  # カテゴリID
                "com_product_id": sanitize_value(row["buturyu_cd"], "default_id"),  # 商品コード
                "product_name": sanitize_value(row["seihin_rkj"], "default_name"),  # 製品名
                "product_text": None,  # テキストがない場合はNone
                "product_status": "1",  # ステータスを固定
                "edit_status": "1",    # 編集ステータス
                "view_auth_group": "j3d7j_base",  # 権限グループ（表示）
                "edit_auth_group": "j3d7j_base",  # 権限グループ（編集）
                "basic": [
                    {
                        "id": "j3d7jE0000289845",  # 属性ID
                        "key": "正式商品名",
                        "value": [sanitize_value(row["seisiki_syohin_nm"], "default_product")]  # 正式商品名の値
                    },
                    {
                        "id": "j3d7jE0000289846",
                        "key": "正式商品名英表記",
                        "value": [sanitize_value(row["seisiki_syohin_ob"], "default_english")]  # 英語表記
                    },
                    {
                        "id": "j3d7jE0000289847",
                        "key": "製品名漢字",
                        "value": [sanitize_value(row["seihin_kj"], "default_kanji")]  # 製品名（漢字）
                    },
                    {
                        "id": "j3d7jE0000289853",
                        "key": "希望小売価格",
                        "value": [sanitize_float(row["kibou_kouri_pr"])]  # 浮動小数点値をクリーニング
                    }
                ]
            }
            product_data.append(product)

        payload = {"products": product_data}

        # ステップ4: APIリクエストを送信
        logger.info(f"APIリクエスト送信中: {post_api_url}")
        response = requests.post(post_api_url, headers=headers, json=payload)

        # ステップ5: APIレスポンスを処理
        if response.status_code == 200:
            logger.info(f"APIリクエスト成功: {response.json()}")
            return {"statusCode": 200, "body": "APIリクエスト成功"}
        else:
            logger.error(f"APIリクエスト失敗: {response.status_code} - {response.text}")
            return {"statusCode": response.status_code, "body": response.text}

    except Exception as e:
        # エラー処理
        logger.error(f"エラーが発生しました: {str(e)}")
        return {"statusCode": 500, "body": str(e)}