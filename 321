import json
import logging
import awswrangler as wr
import requests
import pandas as pd
from botocore.exceptions import ClientError

# ログ設定を初期化
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    try:
        # ステップ1: S3から差分ファイルを読み込む
        bucket_name = "mastergpoc"
        input_file_key = "temp/01_product_compare.csv"
        output_file_key = "results/01_product_api.csv"
        logger.info(f"S3のファイルを読み込み中: s3://{bucket_name}/{input_file_key}")

        try:
            # S3からCSVファイルを読み込む
            data = wr.s3.read_csv(f's3://{bucket_name}/{input_file_key}')
        except ClientError as e:
            # S3読み込みエラーを記録
            logger.error(f"S3ファイルの読み込みに失敗しました: {str(e)}")
            return {
                "statusCode": 500,
                "body": f"S3ファイルの読み込みに失敗: {str(e)}"
            }

        # ステップ2: 必要な列を追加
        if "method_type" not in data.columns:
            data.insert(0, "method_type", "")  # method_type列を追加
        if "product_id" not in data.columns:
            data.insert(1, "product_id", "null")  # product_id列を追加

        # 結果を保存するリスト
        result_data = []

        # APIトークンとヘッダーを設定
        token = "Bearer <your-token>"
        headers = {
            "User-Agent": "test-agent",
            "Authorization": token,
            "ClientId": "75"
        }

        # 各レコードを処理
        for index, row in data.iterrows():
            buturyu_cd = row['buturyu_cd']
            api_url = f"https://api.plapi-product.com/plapi/api/v1/com_product_id/catalogs/{buturyu_cd}"

            # デフォルト値を設定
            method_type = "POST"
            product_id = "null"

            try:
                # POSTまたはPUTリクエストを送信
                if row["product_id"] == "null":  # product_id が null の場合は POST
                    response = requests.post(api_url, headers=headers, json=row.to_dict())
                else:  # product_id が存在する場合は PUT
                    method_type = "PUT"
                    response = requests.put(api_url, headers=headers, json=row.to_dict())

                # レスポンス解析
                if response.status_code in [200, 201]:
                    api_result = response.json()
                    product_id = api_result.get("product_id", "null")
                    logger.info(f"{method_type} 成功: {api_result}")
                else:
                    logger.error(f"{method_type} 失敗: {response.status_code} - {response.text}")
            except Exception as e:
                logger.error(f"APIリクエスト中にエラーが発生しました: {str(e)}")

            # 結果を収集
            row["method_type"] = method_type
            row["product_id"] = product_id
            result_data.append(row)

        # ステップ3: 結果を保存
        if result_data:
            result_df = pd.DataFrame(result_data)

            # S3にCSVファイルを保存
            wr.s3.to_csv(result_df, f's3://{bucket_name}/{output_file_key}', index=False)
            logger.info(f"結果がS3に保存されました: s3://{bucket_name}/{output_file_key}")
        else:
            logger.warning("結果データが空です。CSVファイルは生成されませんでした。")

        return {
            "statusCode": 200,
            "body": json.dumps("処理が正常に完了しました。")
        }

    except Exception as e:
        # エラーログを記録
        logger.error(f"エラーが発生しました: {str(e)}")
        return {
            "statusCode": 500,
            "body": f"エラー: {str(e)}"
        }