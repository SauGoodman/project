import json
import logging
import awswrangler as wr
import pandas as pd
from botocore.exceptions import ClientError

# ログ設定を初期化
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    try:
        # S3のバケットとファイルキーを設定
        bucket_name = "mastergpoc"
        input_file_key = "temp/01_product_compare.csv"
        output_post_file_key = "results/01_product_apipost.csv"
        output_put_file_key = "results/01_product_apiput.csv"

        logger.info(f"S3のファイルを読み込み中: s3://{bucket_name}/{input_file_key}")

        # ステップ1: S3からCSVファイルを読み込む
        try:
            data = wr.s3.read_csv(f's3://{bucket_name}/{input_file_key}')
        except ClientError as e:
            logger.error(f"S3ファイルの読み込みに失敗しました: {str(e)}")
            return {
                "statusCode": 500,
                "body": f"S3ファイルの読み込みに失敗: {str(e)}"
            }

        # API仮レスポンスのシミュレーション
        # 正式なAPI呼び出しコードがある場合はここで置き換える
        api_response = {
            "errors": [
                {"status_code": "400", "com_product_id": "215", "error": "取得できる情報がありません。"},
                {"status_code": "400", "com_product_id": "10034", "error": "取得できる情報がありません。"},
                {"status_code": "400", "com_product_id": "11596", "error": "取得できる情報がありません。"}
            ],
            "templates": [
                {
                    "product_id": "j3d7j20241206134045352639",
                    "category_name": "suzuki_test",
                    "category_id": "j3d7j0000021623",
                    "product_name": "商品登録テスト",
                    "product_text": None,
                    "product_status": 1,
                    "edit_status": 1,
                    "product_status_text": "販売中"
                }
            ]
        }

        # ステップ2: `errors` と `templates` の処理
        post_data = []
        put_data = []

        # `errors` の処理（POSTデータ）
        for error in api_response["errors"]:
            post_data.append({
                "method_type": "POST",
                "product_id": "null",
                **error
            })

        # `templates` の処理（PUTデータ）
        for template in api_response["templates"]:
            put_data.append({
                "method_type": "PUT",
                "product_id": template.get("product_id", "null"),
                **template
            })

        # ステップ3: データをDataFrameに変換してS3に書き出し
        if post_data:
            post_df = pd.DataFrame(post_data)
            wr.s3.to_csv(post_df, f's3://{bucket_name}/{output_post_file_key}', index=False)
            logger.info(f"POSTデータがS3に保存されました: s3://{bucket_name}/{output_post_file_key}")

        if put_data:
            put_df = pd.DataFrame(put_data)
            wr.s3.to_csv(put_df, f's3://{bucket_name}/{output_put_file_key}', index=False)
            logger.info(f"PUTデータがS3に保存されました: s3://{bucket_name}/{output_put_file_key}")

        return {
            "statusCode": 200,
            "body": json.dumps("処理が正常に完了しました。")
        }

    except Exception as e:
        # エラーログを記録
        logger.error(f"エラーが発生しました: {str(e)}")
        return {
            "statusCode": 500,
            "body": f"エラー: {str(e)}"
        }