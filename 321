import json
import logging
import awswrangler as wr
import requests
import pandas as pd
import boto3
from botocore.exceptions import ClientError
from time import sleep

# --- ログ設定 ---
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# --- DynamoDB 設定 ---
dynamodb = boto3.resource('dynamodb')
table_name = "RequestCount"
request_count_table = dynamodb.Table(table_name)

# --- API設定 ---
API_BASE_URL = "https://api.plapi-product.com/plapi/api/v1/products"
HEADERS = {
    "User-Agent": "test-agent",
    "Authorization": "Bearer <新しいAPIトークン>",  # トークンはここに設定
    "ClientId": "75"
}

BATCH_SIZE = 100  # APIリクエストのバッチサイズ

# --- DynamoDB操作 ---
def get_last_processed_count(method_type):
    try:
        response = request_count_table.get_item(Key={"FunctionType": method_type})
        return int(response['Item']['RecCount']) if 'Item' in response else 0
    except Exception as e:
        logger.error(f"DynamoDB取得エラー: {e}")
        return 0

def update_request_count(method_type, count):
    try:
        request_count_table.update_item(
            Key={"FunctionType": method_type},
            UpdateExpression="SET RecCount = :count",
            ExpressionAttributeValues={":count": count}
        )
    except Exception as e:
        logger.error(f"DynamoDB更新エラー: {e}")

# --- GET操作 (ProductId確認) ---
def check_product_id(product_id):
    try:
        response = requests.get(f"{API_BASE_URL}/{product_id}", headers=HEADERS)
        return response.status_code == 200  # 存在する場合 True
    except Exception as e:
        logger.error(f"GETエラー: {e}")
        return False

# --- POSTデータを処理 ---
def process_post_data(post_df):
    for i in range(0, len(post_df), BATCH_SIZE):
        batch_df = post_df.iloc[i:i + BATCH_SIZE]
        payload = {
            "products": [
                {
                    "category_id": row.get("category_id", "default"),
                    "product_name": row.get("product_name", "default"),
                    "product_status": "1"
                }
                for _, row in batch_df.iterrows()
            ]
        }
        try:
            response = requests.post(API_BASE_URL, headers=HEADERS, json=payload)
            logger.info(f"POST結果: {response.status_code}, 内容: {response.json()}")
        except Exception as e:
            logger.error(f"POSTエラー: {e}")
        sleep(1)

# --- PUTデータを処理 ---
def process_put_data(put_df):
    for i in range(0, len(put_df), BATCH_SIZE):
        batch_df = put_df.iloc[i:i + BATCH_SIZE]
        payload = {
            "products": [
                {
                    "product_id": row.get("product_id"),
                    "category_id": row.get("category_id", "default"),
                    "product_name": row.get("product_name", "default"),
                    "product_status": "1"
                }
                for _, row in batch_df.iterrows()
            ]
        }
        try:
            response = requests.put(API_BASE_URL, headers=HEADERS, json=payload)
            logger.info(f"PUT結果: {response.status_code}, 内容: {response.json()}")
        except Exception as e:
            logger.error(f"PUTエラー: {e}")
        sleep(1)

# --- Lambdaハンドラー ---
def lambda_handler(event, context):
    bucket_name = "mastergpoc"
    input_file_key = "results/01_product_apipost.csv"

    try:
        # S3からデータを取得
        logger.info(f"S3読み込み: {bucket_name}/{input_file_key}")
        df = wr.s3.read_csv(f"s3://{bucket_name}/{input_file_key}", dtype=str)

        # DynamoDBから進捗取得
        last_post_count = get_last_processed_count("post")
        last_put_count = get_last_processed_count("put")

        # POST対象のデータ
        post_df = df[(df["method_type"] == "post")].iloc[last_post_count:]
        if not post_df.empty:
            logger.info(f"POST処理データ: {len(post_df)} 件")
            process_post_data(post_df)
            update_request_count("post", last_post_count + len(post_df))

        # PUT対象のデータ
        put_df = df[(df["method_type"] == "getProductId")].iloc[last_put_count:]
        if not put_df.empty:
            logger.info(f"PUT処理データ: {len(put_df)} 件")
            process_put_data(put_df)
            update_request_count("put", last_put_count + len(put_df))

        return {"statusCode": 200, "body": "処理が完了しました"}

    except Exception as e:
        logger.error(f"エラーが発生しました: {e}")
        return {"statusCode": 500, "body": f"エラー: {e}"}