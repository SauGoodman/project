import boto3
import logging
from botocore.exceptions import ClientError

# --- ログ設定 ---
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# --- S3 と DynamoDB 設定 ---
s3_client = boto3.client('s3')
dynamodb = boto3.resource('dynamodb')
table_name = "RequestCount"
request_count_table = dynamodb.Table(table_name)

# --- バケット名とファイルパス設定 ---
BUCKET_NAME = "mastergpoc"

INPUT_OLD_FILE = "input/01_product_old.csv"
INPUT_NEW_FILE = "input/01_product_new.csv"
TEMP_COMPARE_FILE = "temp/01_product_compare.csv"
RESULT_POST_FILE = "results/01_product_apipost.csv"
RESULT_PUT_FILE = "results/01_product_apiput.csv"

def backup_file():
    """バックアップファイルとDynamoDBの処理"""
    try:
        # Step 1: input/01_product_old.csv を削除
        logger.info(f"Deleting file: {INPUT_OLD_FILE}")
        s3_client.delete_object(Bucket=BUCKET_NAME, Key=INPUT_OLD_FILE)

        # Step 2: input/01_product_new.csv を input/01_product_old.csv にリネーム
        logger.info(f"Renaming file: {INPUT_NEW_FILE} -> {INPUT_OLD_FILE}")
        copy_source = {'Bucket': BUCKET_NAME, 'Key': INPUT_NEW_FILE}
        s3_client.copy_object(Bucket=BUCKET_NAME, CopySource=copy_source, Key=INPUT_OLD_FILE)
        s3_client.delete_object(Bucket=BUCKET_NAME, Key=INPUT_NEW_FILE)

        # Step 3: temp/01_product_compare.csv を削除
        logger.info(f"Deleting file: {TEMP_COMPARE_FILE}")
        s3_client.delete_object(Bucket=BUCKET_NAME, Key=TEMP_COMPARE_FILE)

        # Step 4: results/01_product_apipost.csv を削除
        logger.info(f"Deleting file: {RESULT_POST_FILE}")
        s3_client.delete_object(Bucket=BUCKET_NAME, Key=RESULT_POST_FILE)

        # Step 5: results/01_product_apiput.csv を削除
        logger.info(f"Deleting file: {RESULT_PUT_FILE}")
        s3_client.delete_object(Bucket=BUCKET_NAME, Key=RESULT_PUT_FILE)

        # Step 6: DynamoDBのレコードを削除
        logger.info("Deleting all records in DynamoDB table")
        response = request_count_table.scan()
        for item in response['Items']:
            request_count_table.delete_item(Key={"FunctionType": item['FunctionType']})

        logger.info("Backup file process completed successfully.")

    except ClientError as e:
        logger.error(f"S3/DynamoDB エラー: {e}")
        raise
    except Exception as e:
        logger.error(f"バックアップ処理中にエラーが発生しました: {e}")
        raise

if __name__ == "__main__":
    try:
        logger.info("バックアップ処理を開始します...")
        backup_file()
        logger.info("バックアップ処理が正常に完了しました。")
    except Exception as e:
        logger.error(f"バックアップ処理に失敗しました: {e}")