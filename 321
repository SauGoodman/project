import json
import logging
import awswrangler as wr
import requests
import pandas as pd
from botocore.exceptions import ClientError

# ログ設定の初期化
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    try:
        # ステップ1: S3からCSVファイルを文字列型で読み込む
        bucket_name = "mastergpoc"
        input_file_key = "temp/01_product_compare.csv"  # 入力ファイルのS3パス
        get_product_file_key = "results/01_product_apiput.csv"  # GET用結果保存パス
        post_file_key = "results/01_product_apipost.csv"  # POST用結果保存パス
        output_file_key = "results/01_product_processed.csv"  # 最終結果保存用S3パス

        logger.info(f"S3からCSVファイルを文字列型で読み込み中: s3://{bucket_name}/{input_file_key}")

        # CSVファイルの読み込み
        try:
            data = wr.s3.read_csv(
                f's3://{bucket_name}/{input_file_key}',
                dtype=str,  # 全列を文字列型で読み込む
                keep_default_na=False  # 空白セルをNaNではなく空文字列として扱う
            )
        except ClientError as e:
            logger.error(f"S3ファイルの読み込みに失敗しました: {str(e)}")
            return {"statusCode": 500, "body": f"S3ファイルの読み込みに失敗しました: {str(e)}"}

        logger.info(f"データの型確認: {data.dtypes}")
        logger.info(f"読み込んだデータの先頭行: {data.head()}")

        # ステップ2: APIトークンとヘッダーの設定
        token = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ..."
        headers = {
            "User-Agent": "test-agent",
            "Authorization": token,
            "ClientId": "75"
        }

        # ステップ3: getProductID APIの呼び出し (バッチ処理)
        batch_size = 100
        get_product_results = []
        post_results = []
        put_results = []

        for i in range(0, len(data), batch_size):
            batch = data.iloc[i:i + batch_size]
            buturyu_ids = batch['buturyu_cd'].tolist()

            # 拼接 GET API 请求格式
            query_params = "&".join(buturyu_ids)
            get_api_url = f"https://api.plapi-product.com/plapi/api/v1/com_product_id/catalogs?{query_params}"
            logger.info(f"GET APIリクエスト送信中: {get_api_url}")

            try:
                response = requests.get(get_api_url, headers=headers, timeout=10)
                if response.status_code == 200:
                    templates = response.json().get("templates", [])
                    for template in templates:
                        get_product_results.append({
                            "buturyu_cd": template["com_product_id"],
                            "product_id": template["product_id"]
                        })
                else:
                    logger.error(f"GET APIリクエスト失敗: {response.status_code} - {response.text}")
            except requests.exceptions.Timeout:
                logger.error(f"GET APIリクエストがタイムアウトしました: {query_params}")
            except Exception as e:
                logger.error(f"GET APIリクエスト中にエラーが発生しました: {str(e)}")

            # POST 操作
            for _, row in batch.iterrows():
                post_api_url = "https://api.plapi-product.com/plapi/api/v1/postProduct"
                post_payload = {"buturyu_cd": row["buturyu_cd"], "details": row.to_dict()}
                try:
                    response = requests.post(post_api_url, headers=headers, json=post_payload)
                    if response.status_code == 201:  # 作成成功
                        post_results.append({"buturyu_cd": row["buturyu_cd"], "status": "created"})
                    elif response.status_code == 400:
                        post_results.append({"buturyu_cd": row["buturyu_cd"], "status": "exists"})
                    else:
                        logger.error(f"POSTエラー: {response.status_code} - {response.text}")
                except Exception as e:
                    logger.error(f"POSTエラー: {str(e)}")

            # PUT 操作
            for _, row in batch.iterrows():
                put_api_url = "https://api.plapi-product.com/plapi/api/v1/putProduct"
                put_payload = {"buturyu_cd": row["buturyu_cd"], "header_ProductName": row.get("product_name", "default")}
                try:
                    response = requests.put(put_api_url, headers=headers, json=put_payload)
                    if response.status_code == 200:  # 更新成功
                        put_results.append({"buturyu_cd": row["buturyu_cd"], "status": "updated"})
                    else:
                        logger.error(f"PUTエラー: {response.status_code} - {response.text}")
                except Exception as e:
                    logger.error(f"PUTエラー: {str(e)}")

        # ステップ4: GET 結果を保存
        get_results_df = pd.DataFrame(get_product_results)
        wr.s3.to_csv(get_results_df, f's3://{bucket_name}/{get_product_file_key}', index=False)
        logger.info(f"GET結果を保存しました: s3://{bucket_name}/{get_product_file_key}")

        # ステップ5: POST 結果を保存
        post_results_df = pd.DataFrame(post_results)
        wr.s3.to_csv(post_results_df, f's3://{bucket_name}/{post_file_key}', index=False)
        logger.info(f"POST結果を保存しました: s3://{bucket_name}/{post_file_key}")

        # ステップ6: PUT 結果を保存
        put_results_df = pd.DataFrame(put_results)
        wr.s3.to_csv(put_results_df, f's3://{bucket_name}/results/01_product_apiput_post.csv', index=False)
        logger.info(f"PUT結果を保存しました: s3://{bucket_name}/results/01_product_apiput_post.csv")

        # ステップ7: 保存されたgetProductIDデータをメインデータに統合
        final_df = pd.merge(data, get_results_df, on="buturyu_cd", how="left")
        final_df = final_df[["product_id"] + [col for col in final_df.columns if col != "product_id"]]

        # ステップ8: 最終結果をS3に保存
        wr.s3.to_csv(final_df, f's3://{bucket_name}/{output_file_key}', index=False)
        logger.info(f"処理結果を保存しました: s3://{bucket_name}/{output_file_key}")

        return {"statusCode": 200, "body": json.dumps("処理が正常に完了しました。")}

    except Exception as e:
        logger.error(f"エラーが発生しました: {str(e)}")
        return {"statusCode": 500, "body": f"エラー: {str(e)}"}