import boto3
import logging

# --- ログ設定 ---
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# --- S3とDynamoDB設定 ---
s3_client = boto3.client('s3')
dynamodb = boto3.resource('dynamodb')
table_name = "RequestCount"
request_count_table = dynamodb.Table(table_name)

# S3バケット設定
BUCKET_NAME = "mastergpoc"
FILE_PATHS = {
    "old_csv": "input/01_product_old.csv",
    "new_csv": "input/01_product_new.csv",
    "compare_csv": "temp/01_product_compare.csv",
    "apipost_csv": "result/01_product_apipost.csv",
    "apiput_csv": "result/01_product_apiput.csv"
}

# --- ファイル削除関数 ---
def delete_s3_file(bucket, key):
    """S3からファイルを削除する"""
    try:
        s3_client.delete_object(Bucket=bucket, Key=key)
        logger.info(f"削除完了: s3://{bucket}/{key}")
    except Exception as e:
        logger.error(f"ファイル削除エラー: s3://{bucket}/{key} - {e}")

# --- ファイルリネーム関数 ---
def rename_s3_file(bucket, old_key, new_key):
    """S3のファイルをリネーム（コピーして元を削除）"""
    try:
        s3_client.copy_object(
            Bucket=bucket, 
            CopySource={'Bucket': bucket, 'Key': old_key}, 
            Key=new_key
        )
        s3_client.delete_object(Bucket=bucket, Key=old_key)
        logger.info(f"リネーム完了: s3://{bucket}/{old_key} → s3://{bucket}/{new_key}")
    except Exception as e:
        logger.error(f"ファイルリネームエラー: {e}")

# --- DynamoDBレコード削除関数 ---
def delete_dynamodb_records():
    """DynamoDBテーブルのレコードを削除する"""
    try:
        response = request_count_table.scan()
        for item in response.get('Items', []):
            request_count_table.delete_item(Key={"FunctionType": item["FunctionType"]})
            logger.info(f"DynamoDBレコード削除: {item['FunctionType']}")
    except Exception as e:
        logger.error(f"DynamoDBレコード削除エラー: {e}")

# --- バックアップ処理 ---
def backup_file():
    """バックアップ処理のメイン関数"""
    try:
        logger.info("バックアップ処理を開始します...")

        # ファイル削除
        files_to_delete = [
            FILE_PATHS["old_csv"], 
            FILE_PATHS["compare_csv"], 
            FILE_PATHS["apipost_csv"], 
            FILE_PATHS["apiput_csv"]
        ]
        for file_key in files_to_delete:
            delete_s3_file(BUCKET_NAME, file_key)

        # ファイルリネーム
        rename_s3_file(BUCKET_NAME, FILE_PATHS["new_csv"], FILE_PATHS["old_csv"])

        # DynamoDBレコード削除
        delete_dynamodb_records()

        logger.info("バックアップ処理が正常に完了しました。")
    except Exception as e:
        logger.error(f"バックアップ処理中にエラーが発生しました: {e}")

# --- Lambda ハンドラー ---
def lambda_handler(event, context):
    backup_file()
    return {
        "statusCode": 200,
        "body": "Lambda succeed"
    }

# --- ローカル実行 ---
if __name__ == "__main__":
    backup_file()