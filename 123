import json
import logging
import awswrangler as wr
import requests
import pandas as pd
from botocore.exceptions import ClientError

# ログ設定を初期化
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    try:
        # S3 バケットとファイルキーの設定
        bucket_name = "mastergpoc"
        input_file_key = "temp/01_product_compare.csv"
        output_file_key = "results/01_product_api.csv"

        logger.info(f"S3のファイルを読み込み中: s3://{bucket_name}/{input_file_key}")

        # ステップ1: S3 から CSV ファイルを読み込む
        try:
            data = wr.s3.read_csv(f's3://{bucket_name}/{input_file_key}')
            logger.info(f"取得したデータ: {data.head()}")
        except ClientError as e:
            logger.error(f"S3 ファイルの読み込みに失敗しました: {str(e)}")
            return {
                "statusCode": 500,
                "body": f"S3 ファイルの読み込みに失敗: {str(e)}"
            }

        # ステップ2: API リクエスト設定
        token = "Bearer <your-token>"
        headers = {
            "User-Agent": "test-agent",
            "Authorization": token,
            "ClientId": "75"
        }

        result_data = []  # 結果を格納するリスト

        # ステップ3: 各行を処理
        for index, row in data.iterrows():
            buturyu_cd = row['buturyu_cd']
            api_url = f"https://api.plapi-product.com/plapi/api/v1/com_product_id/catalogs/{buturyu_cd}"
            
            # POST または PUT の判定
            if pd.isnull(row.get("product_id")):
                method_type = "POST"
                try:
                    response = requests.post(api_url, headers=headers, json=row.to_dict())
                except Exception as e:
                    logger.error(f"POST リクエスト失敗: {str(e)}")
                    response = None
            else:
                method_type = "PUT"
                try:
                    response = requests.put(api_url, headers=headers, json=row.to_dict())
                except Exception as e:
                    logger.error(f"PUT リクエスト失敗: {str(e)}")
                    response = None

            # レスポンス処理
            product_id = "null"
            if response and response.status_code in [200, 201]:
                try:
                    api_result = response.json()
                    product_id = api_result.get("product_id", "null")
                    logger.info(f"{method_type} 成功: {api_result}")
                except json.JSONDecodeError:
                    logger.error(f"{method_type} のレスポンス解析に失敗: {response.text}")
            else:
                logger.error(f"{method_type} 失敗: {response.status_code if response else 'No Response'}")

            # 更新データを作成
            updated_row = row.to_dict()
            updated_row["method_type"] = method_type
            updated_row["product_id"] = product_id
            result_data.append(updated_row)

        # ステップ4: 結果を S3 に保存
        if result_data:
            result_df = pd.DataFrame(result_data)
            wr.s3.to_csv(result_df, f's3://{bucket_name}/{output_file_key}', index=False)
            logger.info(f"結果が S3 に保存されました: s3://{bucket_name}/{output_file_key}")
        else:
            logger.warning("結果データが空です。CSV ファイルは生成されませんでした。")

        return {
            "statusCode": 200,
            "body": json.dumps("処理が正常に完了しました。")
        }

    except Exception as e:
        logger.error(f"エラーが発生しました: {str(e)}")
        return {
            "statusCode": 500,
            "body": f"エラー: {str(e)}"
        }