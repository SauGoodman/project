import json
import logging
import awswrangler as wr
import requests
import math
import pandas as pd
from botocore.exceptions import ClientError

# ログ設定
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def sanitize_value(value, default=""):
    """値をクリーニングし、欠損値をデフォルト値に置き換える"""
    if pd.isna(value) or value == "":
        return default
    return value

def sanitize_float(value):
    """浮動小数点値をクリーニング"""
    if isinstance(value, float) and (math.isnan(value) or math.isinf(value)):
        return 0  # 無効値を0に置き換え
    return value

def lambda_handler(event, context):
    try:
        # ステップ1: S3からCSVファイルを読み込む
        bucket_name = "mastergpoc"
        input_file_key = "results/01_product_apipost.csv"  # 入力ファイルのS3パス

        logger.info(f"S3からCSVファイルを読み込み中: s3://{bucket_name}/{input_file_key}")

        # S3からCSVファイルを読み込む処理
        try:
            df = wr.s3.read_csv(f's3://{bucket_name}/{input_file_key}')
        except Exception as e:
            logger.error(f"CSVファイルの読み込みに失敗しました: {str(e)}")
            return {
                "statusCode": 500,
                "body": f"CSVファイルの読み込みに失敗しました: {str(e)}"
            }

        # データの欠損値をデフォルト値で埋める
        df.fillna({
            "buturyu_cd": "default_id",          # 商品コードが空の場合のデフォルト値
            "seihin_rkj": "default_name",        # 製品名が空の場合のデフォルト値
            "seisiki_syohin_nm": "default_product",  # 正式商品名が空の場合のデフォルト値
            "seisiki_syohin_ob": "default_english",  # 正式商品名（英表記）が空の場合のデフォルト値
            "seihin_kj": "default_kanji",        # 製品名（漢字）が空の場合のデフォルト値
            "kibou_kouri_pr": 0                  # 希望小売価格が空の場合は0
        }, inplace=True)

        # POSTリクエスト用のAPIエンドポイント
        post_api_url = "https://api.plapi-product.com/plapi/api/v1/products"  # 固定URL

        # ステップ2: APIトークンとヘッダーの設定
        token = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI3NSIsImp0aSI6IjA0OTM0MmQyZTViMDdmNDY4ZmQ3ZGExNmFhODEwZTZhMjMyYjk1MjMxN2ZlNGFkMzIxMWFhNTI1NzA3Y2UzYWI3ZWIyOGU3MTNmZDMxZGVlIiwiaWF0IjoxNzMzMzYyMTcxLjUwNDYzOCwibmJmIjoxNzMzMzYyMTcxLjUwNDY0MSwiZXhwIjoxNzUwNjQyMTcxLjQyNDAxNSwic3ViIjoiIiwic2NvcGVzIjpbIioiXX0.LMPyWDzLvv-SqZOg6anSsuaSLR1FgmoFd2Op4jS-dtT8J87zVqfaBgMyVBDftAXgKZnH_Xe4MzXVyhdKZ6JDcSuB5ENbFqIPzFxePeQFSlFxwV3rCBuq7vpX9BmLnV8bwMawGC_SX980z9wkk7m90v_x-EOYjkmLC9BYDS8wyfEQAGa67-ibHci_okmAKAMHE8Zc9BwFUkW-FjF3P26qUjlrkh4HC5uRh0BKTts61q8pc7VqbAithJK7KcAf2quiyuUBoq87XIGGnT9rxd2xd_oykO8Gh9iC-bNdxJLcIU9TInOXjjW9O-DjcJB8NfJo62xl72SdENnG_m4z9eGAamDCkFk1iM12vFiMeOhm1Id8nMD7ZgEf9E1z6oI6Qp705RnT-ZuP9DFy8bNiIciezU3AuHKrgTErSDVDaKHCEOfLN74LKiB9RWhTZc7Aje4xAWQOVdWR98y9I8-VfytWxPGRpHCAtgY4XBc6ghkreV0QgK-eVYc1q4jNJaLQLo0jUnpQ5SSVEHyQWDErForoMknaf-4bewQVPE-fIuZIt1HoOZ20UJ0sXBI1WgYO9qUzxZWz4y78zX7XToDOzdx8KHu9RVF2VxUZ9smwM3aYk7K6Fn24ilEDUSyXokbIMzcP5K9lb780o3ODlN6Ak2F-M43t15fEw205bWNvqXNeBXo"
        headers = {
            "Authorization": token,
            "User-Agent": "test-agent",
            "Content-Type": "application/json",
            "ClientId": "75"
        }

        # ステップ3: POST用のJSONデータを構築
        product_data = []
        for _, row in df.iterrows():
            product = {
                "category_id": "j3d7jC0000021623",
                "com_product_id": sanitize_value(row["buturyu_cd"], "default_id"),
                "product_name": sanitize_value(row["seihin_rkj"], "default_name"),
                "product_text": "",
                "product_status": "1",
                "edit_status": "1",
                "view_auth_group": "j3d7j_base",  # 権限グループ（表示）
                "edit_auth_group": "j3d7j_base",  # 権限グループ（編集）
                "client_read_auth": "",
                "client_write_auth": "",
                "basic": [
                    {
                        "id": "j3d7jE0000289845",
                        "key": "正式商品名",
                        "value": [sanitize_value(row["seisiki_syohin_nm"], "default_product")]
                    },
                    {
                        "id": "j3d7jE0000289846",
                        "key": "正式商品名英名",
                        "value": [sanitize_value(row["seisiki_syohin_ob"], "default_english")]
                    },
                    {
                        "id": "j3d7jE0000289847",
                        "key": "製品名称漢字",
                        "value": [sanitize_value(row["seihin_kj"], "default_kanji")]
                    },
                    {
                        "id": "j3d7jE0000289853",
                        "key": "希望小売価格",
                        "value": [str(sanitize_float(row["kibou_kouri_pr"]))]
                    }
                ],
                "specification": [
                    {
                        "id": "j3d7jE0000289825",
                        "key": "sample",
                        "value": [""]
                    }
                ],
                "tab1": [
                    {
                        "id": "j3d7jE0000289826",
                        "key": "sample",
                        "value": [""]
                    }
                ],
                "relation": [
                    {
                        "id": "j3d7jE0000289833",
                        "key": "関連商品",
                        "value": [""]
                    }
                ]
            }
            product_data.append(product)

        payload = {"products": product_data}

        # JSONをログに出力
        logger.info(f"送信するJSONデータ: {json.dumps(payload, ensure_ascii=False, indent=2)}")

        # ステップ4: APIリクエストを送信
        response = requests.post(post_api_url, headers=headers, json=payload)

        # ステップ5: APIレスポンスの処理
        if response.status_code == 200:
            logger.info(f"APIリクエスト成功: {response.json()}")
            return {"statusCode": 200, "body": json.dumps("APIリクエスト成功")}
        else:
            logger.error(f"APIリクエスト失敗: {response.status_code} - {response.text}")
            return {"statusCode": response.status_code, "body": response.text}

    except Exception as e:
        logger.error(f"エラーが発生しました: {str(e)}")
        return {"statusCode": 500, "body": f"エラー: {str(e)}"}
