import json
import logging
import awswrangler as wr
import requests
import pandas as pd
from botocore.exceptions import ClientError

# ログ設定の初期化
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    try:
        # ステップ1: S3からCSVファイルを読み込む
        bucket_name = "mastergpoc"
        input_file_key = "temp/01_product_compare.csv"
        post_file_key = "results/01_product_apipost.csv"
        put_file_key = "results/01_product_apiput.csv"

        logger.info(f"Reading file from S3: s3://{bucket_name}/{input_file_key}")

        # S3からCSVファイルの読み込み
        try:
            data = wr.s3.read_csv(f's3://{bucket_name}/{input_file_key}')
        except ClientError as e:
            logger.error(f"Failed to read S3 file: {str(e)}")
            return {"statusCode": 500, "body": f"Failed to read S3 file: {str(e)}"}

        # API URLの作成
        buturyu_cd_list = data['buturyu_cd'].tolist()
        joined_buturyu_cd = "&".join(map(str, buturyu_cd_list))
        api_url = f"https://api.plapi-product.com/plapi/api/v1/com_product_id/catalogs?{joined_buturyu_cd}"
        logger.info(f"Generated API URL: {api_url}")

        # APIトークンとヘッダーの設定
        token = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI3NSIsImp0aSI6IjA0OTM0MmQyZTViMDdmNDY4ZmQ3ZGExNmFhODEwZTZhMjMyYjk1MjMxN2ZlNGFkMzIxMWFhNTI1NzA3Y2UzYWI3ZWIyOGU3MTNmZDMxZGVlIiwiaWF0IjoxNzMzMzYyMTcxLjUwNDYzOCwibmJmIjoxNzMzMzYyMTcxLjUwNDY0MSwiZXhwIjoxNzUwNjQyMTcxLjQyNDAxNSwic3ViIjoiIiwic2NvcGVzIjpbIioiXX0.LMPyWDzLvv-SqZOg6anSsuaSLR1FgmoFd2Op4jS-dtT8J87zVqfaBgMyVBDftAXgKZnH_Xe4MzXVyhdKZ6JDcSuB5ENbFqIPzFxePeQFSlFxwV3rCBuq7vpX9BmLnV8bwMawGC_SX980z9wkk7m90v_x-EOYjkmLC9BYDS8wyfEQAGa67-ibHci_okmAKAMHE8Zc9BwFUkW-FjF3P26qUjlrkh4HC5uRh0BKTts61q8pc7VqbAithJK7KcAf2quiyuUBoq87XIGGnT9rxd2xd_oykO8Gh9iC-bNdxJLcIU9TInOXjjW9O-DjcJB8NfJo62xl72SdENnG_m4z9eGAamDCkFk1iM12vFiMeOhm1Id8nMD7ZgEf9E1z6oI6Qp705RnT-ZuP9DFy8bNiIciezU3AuHKrgTErSDVDaKHCEOfLN74LKiB9RWhTZc7Aje4xAWQOVdWR98y9I8-VfytWxPGRpHCAtgY4XBc6ghkreV0QgK-eVYc1q4jNJaLQLo0jUnpQ5SSVEHyQWDErForoMknaf-4bewQVPE-fIuZIt1HoOZ20UJ0sXBI1WgYO9qUzxZWz4y78zX7XToDOzdx8KHu9RVF2VxUZ9smwM3aYk7K6Fn24ilEDUSyXokbIMzcP5K9lb780o3ODlN6Ak2F-M43t15fEw205bWNvqXNeBXo"
        headers = {
            "User-Agent": "test-agent",
            "Authorization": token,
            "ClientId": "75"
        }

        # APIリクエストの送信
        logger.info("Sending API request...")
        response = requests.get(api_url, headers=headers)
        if response.status_code not in [200, 400]:
            logger.error(f"API request failed: {response.status_code} - {response.text}")
            return {"statusCode": response.status_code, "body": f"API request failed: {response.text}"}

        # APIレスポンスの解析
        try:
            api_data = response.json()
        except json.JSONDecodeError:
            logger.error(f"Failed to decode API response: {response.text}")
            return {"statusCode": 500, "body": "Failed to decode API response."}

        logger.info(f"API response received: {api_data}")

        # APIレスポンスの処理
        errors = api_data.get("errors", [])
        templates = api_data.get("templates", [])

        error_ids = {str(error["com_product_id"]) for error in errors}
        template_dict = {str(template["com_product_id"]): template["product_id"] for template in templates}

        # POSTとPUT用のデータフレームに分割
        post_df = data[data["buturyu_cd"].isin(error_ids)]
        put_df = data[data["buturyu_cd"].isin(template_dict.keys())]

        # PUTデータフレームにproduct_idを更新
        put_df["product_id"] = put_df["buturyu_cd"].map(template_dict)
        put_df = put_df[["product_id"] + list(data.columns)]

        # 処理結果をS3に保存
        if not post_df.empty:
            wr.s3.to_csv(post_df, f's3://{bucket_name}/{post_file_key}', index=False)
            logger.info(f"POST results saved: s3://{bucket_name}/{post_file_key}")

        if not put_df.empty:
            wr.s3.to_csv(put_df, f's3://{bucket_name}/{put_file_key}', index=False)
            logger.info(f"PUT results saved: s3://{bucket_name}/{put_file_key}")

        logger.info("Process completed successfully.")
        return {"statusCode": 200, "body": json.dumps("Process completed successfully.")}

    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        return {"statusCode": 500, "body": f"Error: {str(e)}"}
