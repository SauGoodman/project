import json
import logging
import awswrangler as wr
import requests
import pandas as pd
from botocore.exceptions import ClientError

# ログ設定を初期化
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    try:
        # ステップ1: S3から差分ファイルを読み込む
        bucket_name = "mastergpoc"
        file_key = "temp/01_product_compare.csv"
        logger.info(f"S3のファイルを読み込み中: s3://{bucket_name}/{file_key}")

        try:
            # S3からCSVファイルを読み込む
            data = wr.s3.read_csv(f's3://{bucket_name}/{file_key}')
        except ClientError as e:
            # S3読み込みエラーを記録
            logger.error(f"S3ファイルの読み込みに失敗しました: {str(e)}")
            return {
                "statusCode": 500,
                "body": f"S3ファイルの読み込みに失敗: {str(e)}"
            }

        # buturyu_cdリストを取得
        buturyu_cd_list = data['buturyu_cd'].tolist()
        logger.info(f"取得したbuturyu_cdリスト: {buturyu_cd_list}")

        # buturyu_cdを結合して1つのAPIリクエストを作成
        joined_buturyu_cd = "&".join(map(str, buturyu_cd_list))  # 例: 425742&12345
        api_url = f"https://api.plapi-product.com/plapi/api/v1/com_product_id/catalogs?{joined_buturyu_cd}"
        logger.info(f"作成したAPI URL: {api_url}")

        # トークンとヘッダーを設定
        token = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI3NSIsImp0aSI6IjA0OTM0MmQyZTViMDdmNDY4ZmQ3ZGExNmFhODEwZTZhMjMyYjk1MjMxN2ZlNGFkMzIxMWFhNTI1NzA3Y2UzYWI3ZWIyOGU3MTNmZDMxZGVlIiwiaWF0IjoxNzMzMzYyMTcxLjUwNDYzOCwibmJmIjoxNzMzMzYyMTcxLjUwNDY0MSwiZXhwIjoxNzUwNjQyMTcxLjQyNDAxNSwic3ViIjoiIiwic2NvcGVzIjpbIioiXX0.LMPyWDzLvv-SqZOg6anSsuaSLR1FgmoFd2Op4jS-dtT8J87zVqfaBgMyVBDftAXgKZnH_Xe4MzXVyhdKZ6JDcSuB5ENbFqIPzFxePeQFSlFxwV3rCBuq7vpX9BmLnV8bwMawGC_SX980z9wkk7m90v_x-EOYjkmLC9BYDS8wyfEQAGa67-ibHci_okmAKAMHE8Zc9BwFUkW-FjF3P26qUjlrkh4HC5uRh0BKTts61q8pc7VqbAithJK7KcAf2quiyuUBoq87XIGGnT9rxd2xd_oykO8Gh9iC-bNdxJLcIU9TInOXjjW9O-DjcJB8NfJo62xl72SdENnG_m4z9eGAamDCkFk1iM12vFiMeOhm1Id8nMD7ZgEf9E1z6oI6Qp705RnT-ZuP9DFy8bNiIciezU3AuHKrgTErSDVDaKHCEOfLN74LKiB9RWhTZc7Aje4xAWQOVdWR98y9I8-VfytWxPGRpHCAtgY4XBc6ghkreV0QgK-eVYc1q4jNJaLQLo0jUnpQ5SSVEHyQWDErForoMknaf-4bewQVPE-fIuZIt1HoOZ20UJ0sXBI1WgYO9qUzxZWz4y78zX7XToDOzdx8KHu9RVF2VxUZ9smwM3aYk7K6Fn24ilEDUSyXokbIMzcP5K9lb780o3ODlN6Ak2F-M43t15fEw205bWNvqXNeBXo"
        headers = {
            "User-Agent": "test-agent",
            "Authorization": token,
            "ClientId": "75"
        }

        # ステップ2: APIリクエストを1回実行
        logger.info("APIリクエストを送信中...")
        response = requests.get(api_url, headers=headers)

        # ステップ3: レスポンスを解析してCSV出力
        if response.status_code in [200, 400]:
            try:
                # JSON形式のレスポンスを解析
                api_data = response.json()
            except json.JSONDecodeError:
                # JSON解析失敗時のエラーログ
                logger.error(f"API応答のJSONデコードに失敗しました: {response.text}")
                api_data = []  # データが無い場合は空リストを設定

            logger.info(f"APIリクエスト成功または部分成功。取得したデータ: {api_data}")

            # method_typeの追加
            result_data = []
            for item in api_data:
                if isinstance(item, dict):  # アイテムが辞書形式であることを確認
                    method_type = "PUT" if item.get("is_existing") else "POST"
                    result_data.append({
                        "method_type": method_type,
                        "product_id": item.get("product_id", "null"),
                        **item  # APIの応答データを展開
                    })

            # 結果を保存
            if result_data:
                result_df = pd.DataFrame(result_data)
                output_key = "results/01_product_api.csv"
                wr.s3.to_csv(result_df, f's3://{bucket_name}/{output_key}', index=False)
                logger.info(f"結果がS3に保存されました: s3://{bucket_name}/{output_key}")
            else:
                logger.warning("結果データが空です。CSVファイルは生成されませんでした。")

        else:
            # APIリクエスト失敗時のログ
            logger.error(f"APIリクエスト失敗: {response.status_code} - {response.text}")
            return {
                "statusCode": response.status_code,
                "body": f"APIリクエスト失敗: {response.text}"
            }

        return {
            "statusCode": 200,
            "body": json.dumps("APIリクエストが正常に完了しました。")
        }

    except Exception as e:
        # エラーログを記録
        logger.error(f"エラーが発生しました: {str(e)}")
        return {
            "statusCode": 500,
            "body": f"エラー: {str(e)}"
        }
