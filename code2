import json
import logging
import awswrangler as wr
import requests
import pandas as pd
from botocore.exceptions import ClientError

# ログ設定
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    try:
        # ステップ1: S3からCSVファイルを読み込む
        bucket_name = "mastergpoc"
        input_file_key = "results/01_product_apipost.csv"  # S3パス

        logger.info(f"S3からCSVファイルを読み込み中: s3://{bucket_name}/{input_file_key}")

        # S3からCSVファイルを読み込む処理
        try:
            df = wr.s3.read_csv(f's3://{bucket_name}/{input_file_key}')
        except Exception as e:
            logger.error(f"CSVファイルの読み込みに失敗しました: {str(e)}")
            return {
                "statusCode": 500,
                "body": f"CSVファイルの読み込みに失敗しました: {str(e)}"
            }

        # デフォルト値で欠損値を埋める
        df.fillna({
            "buturyu_cd": "default_id",          # 商品コード
            "seihin_rkj": "default_name",        # 製品名
            "seisiki_syohin_nm": "default_product"  # 正式商品名
        }, inplace=True)

        # POSTリクエスト用のAPIエンドポイント
        post_api_url = "https://api.plapi-product.com/plapi/api/v1/products"

        # APIトークンとヘッダーの設定
        token = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI3NS..."
        headers = {
            "Authorization": token,
            "User-Agent": "test-agent",
            "Content-Type": "application/json",
            "ClientId": "75"
        }

        # 最小化されたJSONデータを構築
        payload = {
            "products": [
                {
                    "category_id": "j3d7jC0000021623",
                    "com_product_id": "test_id",
                    "product_name": "test_name",
                    "product_status": "1",
                    "edit_status": "1",
                    "view_auth_group": "j3d7j_base",
                    "edit_auth_group": "j3d7j_base",
                    "basic": [
                        {
                            "id": "j3d7jE0000289845",
                            "key": "正式商品名",
                            "value": ["テスト商品"]
                        }
                    ]
                }
            ]
        }

        # JSONをログに出力
        logger.info(f"送信するJSONデータ: {json.dumps(payload, ensure_ascii=False, indent=2)}")

        # ステップ2: APIリクエストを送信
        try:
            response = requests.post(post_api_url, headers=headers, json=payload)
            response.raise_for_status()  # HTTPエラーをチェック
        except requests.exceptions.RequestException as e:
            logger.error(f"APIリクエスト失敗: {str(e)}")
            return {"statusCode": 500, "body": f"APIリクエスト失敗: {str(e)}"}

        # ステップ3: レスポンスを処理
        if response.status_code == 200:
            logger.info(f"APIリクエスト成功: {response.json()}")
            return {"statusCode": 200, "body": json.dumps("APIリクエスト成功")}
        else:
            logger.error(f"APIリクエスト失敗: {response.status_code} - {response.text}")
            return {"statusCode": response.status_code, "body": response.text}

    except Exception as e:
        logger.error(f"エラーが発生しました: {str(e)}")
        return {"statusCode": 500, "body": f"エラー: {str(e)}"}