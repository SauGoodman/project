import json
import logging
import awswrangler as wr
import requests
import pandas as pd
from botocore.exceptions import ClientError

# ログ設定の初期化
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    try:
        # S3ファイル設定
        bucket_name = "mastergpoc"
        input_file_key = "temp/01_product_compare.csv"
        post_file_key = "results/01_product_apipost.csv"
        put_file_key = "results/01_product_apiput.csv"

        logger.info(f"S3から入力データを読み込み: s3://{bucket_name}/{input_file_key}")

        # ステップ1: CSVデータ読み込み
        try:
            data = wr.s3.read_csv(
                f's3://{bucket_name}/{input_file_key}',
                dtype=str,
                keep_default_na=False
            )
        except ClientError as e:
            logger.error(f"CSVファイルの読み込み失敗: {str(e)}")
            return {"statusCode": 500, "body": f"CSVファイルの読み込み失敗: {str(e)}"}

        logger.info(f"データの型確認: {data.dtypes}")
        logger.info(f"先頭行: {data.head()}")

        # APIトークンとヘッダー設定
        token = "Bearer your_api_token"
        headers = {
            "User-Agent": "test-agent",
            "Authorization": token,
            "ClientId": "75"
        }

        # 結果を格納するリスト
        post_results = []
        put_results = []

        # ステップ2: GETリクエストでデータ取得 (バッチ処理)
        batch_size = 100
        for i in range(0, len(data), batch_size):
            batch = data.iloc[i:i + batch_size]
            buturyu_ids = batch['buturyu_cd'].tolist()
            query_params = "&".join(buturyu_ids)
            get_api_url = f"https://api.plapi-product.com/plapi/api/v1/com_product_id/catalogs?{query_params}"
            logger.info(f"GET APIリクエスト送信: {get_api_url}")

            try:
                response = requests.get(get_api_url, headers=headers, timeout=10)
                if response.status_code == 200:
                    templates = response.json().get("templates", [])
                    errors = response.json().get("errors", [])

                    # POST用データ（エラーから抽出）
                    for error in errors:
                        post_results.append({
                            "buturyu_cd": error["com_product_id"],
                            "message": error["message"]
                        })

                    # PUT用データ（テンプレートから抽出）
                    for template in templates:
                        put_results.append({
                            "buturyu_cd": template["com_product_id"],
                            "product_id": template["product_id"]
                        })
                else:
                    logger.error(f"GETリクエスト失敗: {response.status_code} - {response.text}")
            except requests.exceptions.Timeout:
                logger.error(f"GETリクエストがタイムアウトしました: {query_params}")
            except Exception as e:
                logger.error(f"GETリクエスト中にエラー発生: {str(e)}")

        # ステップ3: POSTリクエスト処理
        for post_item in post_results:
            post_api_url = "https://api.plapi-product.com/plapi/api/v1/postProduct"
            try:
                response = requests.post(post_api_url, headers=headers, json=post_item)
                if response.status_code in [201, 200]:
                    logger.info(f"POST成功: {post_item['buturyu_cd']}")
                else:
                    logger.error(f"POSTエラー: {response.status_code} - {response.text}")
            except Exception as e:
                logger.error(f"POSTリクエストエラー: {str(e)}")

        # ステップ4: PUTリクエスト処理
        for put_item in put_results:
            put_api_url = "https://api.plapi-product.com/plapi/api/v1/putProduct"
            try:
                response = requests.put(put_api_url, headers=headers, json=put_item)
                if response.status_code in [200, 204]:
                    logger.info(f"PUT成功: {put_item['buturyu_cd']}")
                else:
                    logger.error(f"PUTエラー: {response.status_code} - {response.text}")
            except Exception as e:
                logger.error(f"PUTリクエストエラー: {str(e)}")

        # ステップ5: 結果保存
        post_results_df = pd.DataFrame(post_results)
        put_results_df = pd.DataFrame(put_results)

        wr.s3.to_csv(post_results_df, f's3://{bucket_name}/{post_file_key}', index=False)
        logger.info(f"POST結果を保存しました: s3://{bucket_name}/{post_file_key}")

        wr.s3.to_csv(put_results_df, f's3://{bucket_name}/{put_file_key}', index=False)
        logger.info(f"PUT結果を保存しました: s3://{bucket_name}/{put_file_key}")

        return {"statusCode": 200, "body": json.dumps("POSTおよびPUT処理が完了しました。")}

    except Exception as e:
        logger.error(f"エラー発生: {str(e)}")
        return {"statusCode": 500, "body": f"エラー: {str(e)}"}