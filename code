import json
import logging
import awswrangler as wr
import requests
import pandas as pd
import boto3
from botocore.exceptions import ClientError

# ログ設定
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# DynamoDB テーブル名
DYNAMO_TABLE_NAME = "RequestCount"

def sanitize_value(value, default="default_value"):
    """値をクリーニングし、欠損値をデフォルト値に置き換える"""
    if pd.isna(value) or value == "":
        return default
    return str(value)  # 必ず文字列に変換

def get_last_processed_count(request_type):
    """DynamoDBから最後に処理した件数を取得する"""
    dynamodb = boto3.client('dynamodb')
    try:
        response = dynamodb.get_item(
            TableName=DYNAMO_TABLE_NAME,
            Key={'RequestType': {'S': request_type}}
        )
        if 'Item' in response:
            return int(response['Item']['ProcessedCount']['N'])
        else:
            return 0
    except ClientError as e:
        logger.error(f"DynamoDBからデータの取得に失敗しました: {e}")
        return 0

def update_processed_count(request_type, count):
    """DynamoDBに処理件数を更新する"""
    dynamodb = boto3.client('dynamodb')
    try:
        dynamodb.put_item(
            TableName=DYNAMO_TABLE_NAME,
            Item={
                'RequestType': {'S': request_type},
                'ProcessedCount': {'N': str(count)}
            }
        )
    except ClientError as e:
        logger.error(f"DynamoDBへのデータ更新に失敗しました: {e}")

def process_post_data(df, bucket_name):
    """POSTデータを処理する"""
    post_api_url = "https://api.plapi-product.com/plapi/api/v1/products"
    token = "Bearer your_api_token_here"  # APIトークン
    headers = {
        "User-Agent": "test-agent",
        "Authorization": token,
        "ClientId": "75"
    }

    batch_size = 100
    total_records = len(df)
    for i in range(0, total_records, batch_size):
        batch_df = df.iloc[i:i+batch_size]
        product_data = []

        for _, row in batch_df.iterrows():
            product = {
                "category_id": sanitize_value(row.get("category_id", "default_category_id")),
                "com_product_id": sanitize_value(row.get("buturyu_cd", "default_id")),
                "product_name": sanitize_value(row.get("product_name", "default_name")),
                "product_text": "",
                "product_status": "1",
                "edit_status": "1",
                "view_auth_group": "j3d7j_base",
                "edit_auth_group": "j3d7j_base",
                "client_read_auth": "",
                "client_write_auth": "",
                "basic": [
                    {
                        "id": "j3d7jE0000289845",
                        "key": "正式商品名",
                        "value": [sanitize_value(row.get("seisiki_syohin_nm", "default_product"))]
                    },
                    {
                        "id": "j3d7jE0000289846",
                        "key": "正式商品名英名",
                        "value": [sanitize_value(row.get("seisiki_syohin_ob", "default_english"))]
                    },
                    {
                        "id": "j3d7jE0000289847",
                        "key": "製品名称漢字",
                        "value": [sanitize_value(row.get("seihin_kj", "default_kanji"))]
                    },
                    {
                        "id": "j3d7jE0000289853",
                        "key": "希望小売価格",
                        "value": [sanitize_value(row.get("kibou_kouri_pr", "0"))]
                    }
                ]
            }
            product_data.append(product)

        payload = {"products": product_data}
        response = requests.post(post_api_url, headers=headers, json=payload)

        if response.status_code == 200:
            logger.info(f"POSTリクエスト成功: {response.json()}")
        else:
            logger.error(f"POSTリクエスト失敗: {response.status_code} - {response.text}")

def process_put_data(df, bucket_name):
    """PUTデータを処理する"""
    put_api_url = "https://api.plapi-product.com/plapi/api/v1/products"
    token = "Bearer your_api_token_here"  # APIトークン
    headers = {
        "User-Agent": "test-agent",
        "Authorization": token,
        "ClientId": "75"
    }

    batch_size = 100
    total_records = len(df)
    for i in range(0, total_records, batch_size):
        batch_df = df.iloc[i:i+batch_size]
        product_data = []

        for _, row in batch_df.iterrows():
            product = {
                "product_id": sanitize_value(row.get("product_id", "default_product_id")),
                "category_id": sanitize_value(row.get("category_id", "default_category_id")),
                "product_name": sanitize_value(row.get("product_name", "default_name")),
                "product_text": "",
                "product_status": "1",
                "edit_status": "1",
                "view_auth_group": "j3d7j_base",
                "edit_auth_group": "j3d7j_base",
                "client_read_auth": "",
                "client_write_auth": "",
                "basic": [
                    {
                        "id": "j3d7jE0000289845",
                        "key": "正式商品名",
                        "value": [sanitize_value(row.get("seisiki_syohin_nm", "default_product"))]
                    },
                    {
                        "id": "j3d7jE0000289846",
                        "key": "正式商品名英名",
                        "value": [sanitize_value(row.get("seisiki_syohin_ob", "default_english"))]
                    },
                    {
                        "id": "j3d7jE0000289847",
                        "key": "製品名称漢字",
                        "value": [sanitize_value(row.get("seihin_kj", "default_kanji"))]
                    },
                    {
                        "id": "j3d7jE0000289853",
                        "key": "希望小売価格",
                        "value": [sanitize_value(row.get("kibou_kouri_pr", "0"))]
                    }
                ]
            }
            product_data.append(product)

        payload = {"products": product_data}
        response = requests.put(put_api_url, headers=headers, json=payload)

        if response.status_code == 200:
            logger.info(f"PUTリクエスト成功: {response.json()}")
        else:
            logger.error(f"PUTリクエスト失敗: {response.status_code} - {response.text}")

def lambda_handler(event, context):
    try:
        bucket_name = "mastergpoc"
        input_file_key = "results/01_product_apipost.csv"

        df = wr.s3.read_csv(f's3://{bucket_name}/{input_file_key}', dtype=str, keep_default_na=False)
        logger.info("CSVファイルの読み込み成功")

        # POST と PUT のデータを分割して処理
        post_df = df[df["request_type"] == "POST"]
        put_df = df[df["request_type"] == "PUT"]

        if not post_df.empty:
            process_post_data(post_df, bucket_name)

        if not put_df.empty:
            process_put_data(put_df, bucket_name)

        return {"statusCode": 200, "body": "処理が正常に完了しました"}

    except Exception as e:
        logger.error(f"エラーが発生しました: {e}")
        return {"statusCode": 500, "body": f"エラー: {e}"}