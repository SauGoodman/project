import json
import logging
import awswrangler as wr
import requests
import pandas as pd
from botocore.exceptions import ClientError

# ログ設定の初期化
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    try:
        # S3ファイル情報
        bucket_name = "mastergpoc"
        input_file_key = "temp/01_product_compare.csv"
        error_file_key = "results/01_product_error.csv"
        template_file_key = "results/01_product_template.csv"

        logger.info(f"S3からCSVファイルを読み込み中: s3://{bucket_name}/{input_file_key}")

        # CSVファイルを読み込む
        try:
            data = wr.s3.read_csv(
                f's3://{bucket_name}/{input_file_key}',
                dtype=str,  # 全ての列を文字列型として読み込む
                keep_default_na=False
            )
        except ClientError as e:
            logger.error(f"S3ファイルの読み込み失敗: {str(e)}")
            return {"statusCode": 500, "body": f"エラー: {str(e)}"}

        logger.info(f"データ: {data.head()}")

        # API設定
        token = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ..."
        headers = {
            "Authorization": token,
            "Content-Type": "application/json"
        }

        errors = []
        templates = []

        # 各行に対してAPI処理
        for _, row in data.iterrows():
            buturyu_cd = row["buturyu_cd"]
            get_api_url = f"https://api.plapi-product.com/plapi/api/v1/com_product_id/{buturyu_cd}"

            try:
                response = requests.get(get_api_url, headers=headers)
                if response.status_code == 200:
                    # 正常なレスポンス
                    json_data = response.json()
                    templates_data = json_data.get("templates", [])
                    for template in templates_data:
                        templates.append({
                            "product_id": template["product_id"],
                            "buturyu_cd": buturyu_cd,
                            **row.to_dict()
                        })
                elif response.status_code == 400:
                    error_data = {
                        "buturyu_cd": buturyu_cd,
                        "status_code": response.status_code,
                        "error_message": response.json().get("error", "Unknown Error")
                    }
                    errors.append(error_data)
                else:
                    logger.error(f"予期しないステータスコード: {response.status_code}")
            except requests.exceptions.RequestException as e:
                logger.error(f"APIリクエスト中にエラー発生: {str(e)}")
                errors.append({
                    "buturyu_cd": buturyu_cd,
                    "status_code": "RequestException",
                    "error_message": str(e)
                })

        # Templatesデータを保存
        if templates:
            templates_df = pd.DataFrame(templates)
            wr.s3.to_csv(templates_df, f's3://{bucket_name}/{template_file_key}', index=False)
            logger.info(f"Templatesデータを保存しました: s3://{bucket_name}/{template_file_key}")

        # Errorsデータを保存
        if errors:
            errors_df = pd.DataFrame(errors)
            wr.s3.to_csv(errors_df, f's3://{bucket_name}/{error_file_key}', index=False)
            logger.info(f"Errorsデータを保存しました: s3://{bucket_name}/{error_file_key}")

        return {"statusCode": 200, "body": "処理が正常に完了しました。"}

    except Exception as e:
        logger.error(f"エラーが発生しました: {str(e)}")
        return {"statusCode": 500, "body": f"エラー: {str(e)}"}