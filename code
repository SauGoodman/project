import json
import logging
import awswrangler as wr
import requests
import pandas as pd
import boto3
from botocore.exceptions import ClientError

# ログ設定
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# DynamoDB テーブル名
DYNAMO_TABLE_NAME = "RequestCount"

def sanitize_value(value, default="default_value"):
    """値をクリーニングし、欠損値をデフォルト値に置き換える"""
    if pd.isna(value) or value == "":
        return default
    return str(value)  # 必ず文字列に変換

def get_last_processed_count():
    """DynamoDBから最後に処理した件数を取得する"""
    dynamodb = boto3.client('dynamodb')
    try:
        response = dynamodb.get_item(
            TableName=DYNAMO_TABLE_NAME,
            Key={'RequestType': {'S': 'PUT'}}
        )
        if 'Item' in response:
            return int(response['Item']['ProcessedCount']['N'])
        else:
            return 0
    except ClientError as e:
        logger.error(f"DynamoDBからデータの取得に失敗しました: {e}")
        return 0

def update_processed_count(count):
    """DynamoDBに処理件数を更新する"""
    dynamodb = boto3.client('dynamodb')
    try:
        dynamodb.put_item(
            TableName=DYNAMO_TABLE_NAME,
            Item={
                'RequestType': {'S': 'PUT'},
                'ProcessedCount': {'N': str(count)}
            }
        )
    except ClientError as e:
        logger.error(f"DynamoDBへのデータ更新に失敗しました: {e}")

def lambda_handler(event, context):
    try:
        # ステップ1: S3からCSVファイルを読み込む
        bucket_name = "mastergpoc"
        input_file_key = "results/01_product_apiput.csv"  # 入力ファイルのS3パス

        logger.info(f"S3からCSVファイルを読み込み中: s3://{bucket_name}/{input_file_key}")

        try:
            df = wr.s3.read_csv(f's3://{bucket_name}/{input_file_key}', dtype=str, keep_default_na=False)
        except Exception as e:
            logger.error(f"CSVファイルの読み込みに失敗しました: {str(e)}")
            return {"statusCode": 500, "body": f"CSVファイルの読み込みに失敗しました: {str(e)}"}

        # 必須フィールドの欠損値をチェック
        df["category_id"] = df["category_id"].apply(lambda x: sanitize_value(x, "default_category_id"))
        df["product_id"] = df["product_id"].apply(lambda x: sanitize_value(x, "default_product_id"))
        df["product_name"] = df["product_name"].apply(lambda x: sanitize_value(x, "default_product_name"))

        # DynamoDBから前回処理した件数を取得
        last_processed_count = get_last_processed_count()
        total_records = len(df)

        # 処理開始位置を決定
        start_index = last_processed_count if last_processed_count < total_records else 0
        logger.info(f"処理開始位置: {start_index}")

        # PUTリクエスト用のAPIエンドポイント
        put_api_url = "https://api.plapi-product.com/plapi/api/v1/products"
        token = "Bearer your_api_token_here"  # APIトークン
        headers = {
            "User-Agent": "test-agent",
            "Authorization": token,
            "ClientId": "75"
        }

        # データを100件ごとに分割してPUTリクエストを送信
        batch_size = 100
        for i in range(start_index, total_records, batch_size):
            batch_df = df.iloc[i:i + batch_size]
            product_data = []

            for _, row in batch_df.iterrows():
                product = {
                    "product_id": sanitize_value(row["product_id"]),
                    "category_id": sanitize_value(row["category_id"]),
                    "product_name": sanitize_value(row["product_name"]),
                    "product_text": "",
                    "product_status": "1",
                    "edit_status": "1",
                    "view_auth_group": "j3d7j_base",
                    "edit_auth_group": "j3d7j_base",
                    "client_read_auth": "",
                    "client_write_auth": "",
                    "basic": [
                        {
                            "id": "j3d7jE0000289845",
                            "key": "正式商品名",
                            "value": [sanitize_value(row.get("seisiki_syohin_nm"), "default_product")]
                        },
                        {
                            "id": "j3d7jE0000289846",
                            "key": "正式商品名英名",
                            "value": [sanitize_value(row.get("seisiki_syohin_ob"), "default_english")]
                        },
                        {
                            "id": "j3d7jE0000289847",
                            "key": "製品名称漢字",
                            "value": [sanitize_value(row.get("seihin_kj"), "default_kanji")]
                        },
                        {
                            "id": "j3d7jE0000289853",
                            "key": "希望小売価格",
                            "value": [sanitize_value(row.get("kibou_kouri_pr"), "0")]
                        }
                    ]
                }
                product_data.append(product)

            payload = {"products": product_data}

            # JSONをログに出力
            logger.info(f"送信するJSONデータ: {json.dumps(payload, ensure_ascii=False, indent=2)}")

            # APIリクエストを送信
            response = requests.put(put_api_url, headers=headers, json=payload)

            if response.status_code == 200:
                logger.info(f"PUTリクエスト成功: {response.json()}")
                # DynamoDBに進捗を記録
                update_processed_count(i + batch_size)
            else:
                logger.error(f"PUTリクエスト失敗: {response.status_code} - {response.text}")
                return {"statusCode": response.status_code, "body": f"PUTリクエスト失敗: {response.text}"}

        # 全てのバッチが正常に処理された場合
        logger.info("PUT処理が正常に完了しました。")
        return {"statusCode": 200, "body": json.dumps("PUT処理が正常に完了しました。")}

    except Exception as e:
        logger.error(f"エラーが発生しました: {str(e)}")
        return {"statusCode": 500, "body": f"エラー: {str(e)}"}