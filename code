import json
import boto3
import awswrangler as wr
from botocore.exceptions import ClientError

# AWS クライアントを初期化
s3 = boto3.client('s3')
dynamodb = boto3.resource('dynamodb')
table_name = "YourDynamoDBTable"
api_endpoint = "https://your-api-endpoint.com"

def lambda_handler(event, context):
    try:
        # ステップ1: S3から差分ファイルを読み込む
        bucket_name = "your-bucket-name"
        file_key = "path/to/diff_file.csv"
        data = wr.s3.read_csv(f"s3://{bucket_name}/{file_key}")
        
        # ステップ2: 差分データをループ処理し、条件に基づいてAPIを呼び出す
        for index, row in data.iterrows():
            product_id = row.get('Product_Id')
            payload = json.dumps(row.to_dict())

            if not product_id:
                # 新しい商品を作成するためにPOST APIを呼び出す
                response = call_api("POST", api_endpoint, payload)
            else:
                # 商品を更新するためにPUT APIを呼び出す
                response = call_api("PUT", f"{api_endpoint}/{product_id}", payload)
            
            if response.status_code >= 400:
                log_to_dynamodb(row.to_dict(), "API呼び出し中のエラー")

        # ステップ3: 差分データをアーカイブ
        archive_s3_file(bucket_name, file_key)

        return {
            "statusCode": 200,
            "body": json.dumps("処理が正常に完了しました")
        }

    except Exception as e:
        # 全ての例外をキャッチしてログに記録
        print(f"エラーが発生しました: {str(e)}")
        return {
            "statusCode": 500,
            "body": json.dumps(f"エラー: {str(e)}")
        }

def call_api(method, url, payload):
    """APIを呼び出すための関数"""
    import requests
    try:
        headers = {'Content-Type': 'application/json'}
        if method == "POST":
            response = requests.post(url, data=payload, headers=headers)
        elif method == "PUT":
            response = requests.put(url, data=payload, headers=headers)
        else:
            raise ValueError("サポートされていないHTTPメソッド")
        return response
    except requests.exceptions.RequestException as e:
        print(f"API呼び出しに失敗しました: {str(e)}")
        raise

def log_to_dynamodb(data, error_message):
    """エラーをDynamoDBに記録する"""
    table = dynamodb.Table(table_name)
    table.put_item(Item={
        "Product_Id": data.get('Product_Id', 'Unknown'),
        "Data": json.dumps(data),
        "Error": error_message
    })

def archive_s3_file(bucket_name, file_key):
    """ファイルをアーカイブまたは削除する"""
    archive_key = f"archive/{file_key.split('/')[-1]}"
    try:
        # ファイルをアーカイブディレクトリにコピー
        s3.copy_object(Bucket=bucket_name, CopySource=f"{bucket_name}/{file_key}", Key=archive_key)
        # 元のファイルを削除
        s3.delete_object(Bucket=bucket_name, Key=file_key)
    except ClientError as e:
        print(f"ファイルのアーカイブ中にエラーが発生しました: {str(e)}")
        raise