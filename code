import json
import logging
import awswrangler as wr
import requests
import pandas as pd

# ログ設定
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def sanitize_value(value, default="default_value"):
    """値をクリーニングし、欠損値をデフォルト値に置き換える"""
    if pd.isna(value) or value == "":
        return default
    return str(value)  # 必ず文字列に変換

def lambda_handler(event, context):
    try:
        bucket_name = "mastergpoc"
        input_file_key = "results/01_product_apipost.csv"  # 入力CSVのS3キー

        logger.info(f"S3からCSVファイルを読み込み中: s3://{bucket_name}/{input_file_key}")

        # S3からCSVファイルを読み込む
        try:
            df = wr.s3.read_csv(f's3://{bucket_name}/{input_file_key}', dtype=str, keep_default_na=False)
        except Exception as e:
            logger.error(f"CSVファイルの読み込みに失敗しました: {str(e)}")
            return {"statusCode": 500, "body": f"CSVファイルの読み込みに失敗しました: {str(e)}"}

        logger.info(f"CSVファイルの読み込み成功: {df.head()}")

        # `request_type`列が存在するか確認
        if "request_type" not in df.columns:
            error_msg = "CSVファイルに 'request_type' 列が存在しません。"
            logger.error(error_msg)
            return {"statusCode": 400, "body": error_msg}

        # `request_type` 列の値をチェック（空値の処理）
        if df["request_type"].isnull().any() or df["request_type"].eq("").any():
            error_msg = "'request_type' 列に空値が含まれています。"
            logger.error(error_msg)
            return {"statusCode": 400, "body": error_msg}

        # POST と PUT のデータを分割して処理
        post_df = df[df["request_type"] == "POST"]
        put_df = df[df["request_type"] == "PUT"]

        logger.info(f"POSTデータ: {len(post_df)} 件, PUTデータ: {len(put_df)} 件")

        # POSTデータを処理
        if not post_df.empty:
            process_post_data(post_df)

        # PUTデータを処理
        if not put_df.empty:
            process_put_data(put_df)

        return {"statusCode": 200, "body": "処理が正常に完了しました"}

    except Exception as e:
        logger.error(f"エラーが発生しました: {e}")
        return {"statusCode": 500, "body": f"エラー: {e}"}

def process_post_data(post_df):
    """POSTデータを処理する関数"""
    post_api_url = "https://api.plapi-product.com/plapi/api/v1/products"
    headers = {
        "User-Agent": "test-agent",
        "Authorization": "Bearer your_api_token_here",
        "ClientId": "75"
    }
    
    logger.info(f"POSTデータを処理中...（件数: {len(post_df)}）")
    batch_size = 100
    total_records = len(post_df)
    
    for i in range(0, total_records, batch_size):
        batch_df = post_df.iloc[i:i+batch_size]
        product_data = []

        for _, row in batch_df.iterrows():
            product = {
                "category_id": sanitize_value(row.get("category_id", "default_category_id")),
                "product_name": sanitize_value(row.get("product_name", "default_product_name")),
                "product_status": "1",
                "edit_status": "1",
                "view_auth_group": "j3d7j_base",
                "edit_auth_group": "j3d7j_base"
            }
            product_data.append(product)

        payload = {"products": product_data}
        logger.info(f"POST用ペイロード: {json.dumps(payload, ensure_ascii=False, indent=2)}")
        response = requests.post(post_api_url, headers=headers, json=payload)

        if response.status_code == 200:
            logger.info(f"POSTリクエスト成功: {response.json()}")
        else:
            logger.error(f"POSTリクエスト失敗: {response.status_code} - {response.text}")

def process_put_data(put_df):
    """PUTデータを処理する関数"""
    put_api_url = "https://api.plapi-product.com/plapi/api/v1/products"
    headers = {
        "User-Agent": "test-agent",
        "Authorization": "Bearer your_api_token_here",
        "ClientId": "75"
    }
    
    logger.info(f"PUTデータを処理中...（件数: {len(put_df)}）")
    batch_size = 100
    total_records = len(put_df)

    for i in range(0, total_records, batch_size):
        batch_df = put_df.iloc[i:i+batch_size]
        product_data = []

        for _, row in batch_df.iterrows():
            product = {
                "product_id": sanitize_value(row.get("product_id", "default_product_id")),
                "category_id": sanitize_value(row.get("category_id", "default_category_id")),
                "product_name": sanitize_value(row.get("product_name", "default_product_name")),
                "product_status": "1",
                "edit_status": "1",
                "view_auth_group": "j3d7j_base",
                "edit_auth_group": "j3d7j_base"
            }
            product_data.append(product)

        payload = {"products": product_data}
        logger.info(f"PUT用ペイロード: {json.dumps(payload, ensure_ascii=False, indent=2)}")
        response = requests.put(put_api_url, headers=headers, json=payload)

        if response.status_code == 200:
            logger.info(f"PUTリクエスト成功: {response.json()}")
        else:
            logger.error(f"PUTリクエスト失敗: {response.status_code} - {response.text}")